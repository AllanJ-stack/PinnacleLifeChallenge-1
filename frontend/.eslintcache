[{"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\index.js":"1","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\App.js":"3","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\store.js":"4","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\ProductHomeScreen.js":"5","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\CartScreen.js":"6","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\ProductScreen.js":"7","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\SigninScreen.js":"8","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\ScanScreen.js":"9","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\DashboardScreen.js":"10","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\ObjectiveScreen.js":"11","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\userActions.js":"12","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\BudgetSheetScreen.js":"13","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\productReducers.js":"14","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\userReducers.js":"15","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\CartReducers.js":"16","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\ScannedItems.js":"17","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\BudgetSheetReducers.js":"18","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\productActions.js":"19","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\CartActions.js":"20","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\AdminActions.js":"21","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\Result1.js":"22","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\BudgetSheetActions.js":"23","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\LoadingBox.js":"24","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\Product.js":"25","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\MessageBox.js":"26","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\Scanner.js":"27","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\AdminBudgetSheet.js":"28","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\BudgetSheet.js":"29","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\constants\\productConstants.js":"30","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\constants\\userConstants.js":"31","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\constants\\CartConstants.js":"32","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\constants\\BudgetSheetConstants.js":"33","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\Footer.js":"34"},{"size":637,"mtime":1614771666309,"results":"35","hashOfConfig":"36"},{"size":375,"mtime":1614771666314,"results":"37","hashOfConfig":"36"},{"size":4118,"mtime":1614855899977,"results":"38","hashOfConfig":"36"},{"size":1247,"mtime":1614771666322,"results":"39","hashOfConfig":"36"},{"size":1351,"mtime":1614771666319,"results":"40","hashOfConfig":"36"},{"size":3466,"mtime":1614771666316,"results":"41","hashOfConfig":"36"},{"size":9489,"mtime":1614771666320,"results":"42","hashOfConfig":"36"},{"size":2089,"mtime":1614771666322,"results":"43","hashOfConfig":"36"},{"size":1381,"mtime":1614771666321,"results":"44","hashOfConfig":"36"},{"size":8794,"mtime":1614771666316,"results":"45","hashOfConfig":"36"},{"size":1351,"mtime":1614772882102,"results":"46","hashOfConfig":"36"},{"size":1583,"mtime":1614771666297,"results":"47","hashOfConfig":"36"},{"size":1363,"mtime":1614772683750,"results":"48","hashOfConfig":"36"},{"size":1071,"mtime":1614771666312,"results":"49","hashOfConfig":"36"},{"size":586,"mtime":1614771666313,"results":"50","hashOfConfig":"36"},{"size":843,"mtime":1614771666311,"results":"51","hashOfConfig":"36"},{"size":1729,"mtime":1614771666311,"results":"52","hashOfConfig":"36"},{"size":604,"mtime":1614771666310,"results":"53","hashOfConfig":"36"},{"size":1868,"mtime":1614771666296,"results":"54","hashOfConfig":"36"},{"size":1376,"mtime":1614771666294,"results":"55","hashOfConfig":"36"},{"size":2210,"mtime":1614771666292,"results":"56","hashOfConfig":"36"},{"size":342,"mtime":1614771666320,"results":"57","hashOfConfig":"36"},{"size":5705,"mtime":1614771666293,"results":"58","hashOfConfig":"36"},{"size":172,"mtime":1614771666300,"results":"59","hashOfConfig":"36"},{"size":358,"mtime":1614771666302,"results":"60","hashOfConfig":"36"},{"size":194,"mtime":1614771666301,"results":"61","hashOfConfig":"36"},{"size":1050,"mtime":1614771666304,"results":"62","hashOfConfig":"36"},{"size":640,"mtime":1614771666298,"results":"63","hashOfConfig":"36"},{"size":550,"mtime":1614771666299,"results":"64","hashOfConfig":"36"},{"size":372,"mtime":1614771666306,"results":"65","hashOfConfig":"36"},{"size":214,"mtime":1614771666307,"results":"66","hashOfConfig":"36"},{"size":98,"mtime":1614771666305,"results":"67","hashOfConfig":"36"},{"size":169,"mtime":1614771666305,"results":"68","hashOfConfig":"36"},{"size":1691,"mtime":1614855996996,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"2aihe0",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\index.js",[],["144","145"],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\App.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\store.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\ProductHomeScreen.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\CartScreen.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\ProductScreen.js",["146"],"import React, { useEffect, useState } from 'react';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport { Link } from 'react-router-dom';\r\nimport Axios from \"axios\";\r\n\r\n\r\nexport default function ProductScreen(props) {\r\n  const productId = props.match.params.id;\r\n  const userCompany = productId.substr(0, 3);\r\n  \r\n  const [productDetails, setProductDetails] = useState({});\r\n  const [qty, setQty] = useState(1);\r\n  \r\n  \r\n  const getProductDetails = async (productId) => {\r\n    const yearRes= await Axios.get('/year.json')\r\n    const year = yearRes.data.session;\r\n    \r\n    console.log(userCompany)\r\n    console.log(year)\r\n    console.log(productId)\r\n\r\n    \r\n    const { data } = await Axios.get(`/product/${userCompany}/${year}.json?orderBy=\"_id\"&equalTo=\"${productId}\"`); // \"get product details from product id\"\r\n    console.log(data)\r\n    const product = data[productId];\r\n    console.log(product);\r\n    return product;\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"hi\");\r\n    getProductDetails(productId).then((productDetails) => {\r\n      console.log(\r\n        \"Here's the productDetails that will be saved into productDetails state:\"\r\n      );\r\n      console.log(productDetails);\r\n      setProductDetails(productDetails);\r\n      \r\n    });\r\n  }, []);\r\n\r\n  // set path once add to cart\r\n  const addToCartHandler = () => {\r\n    props.history.push(`/cart/${productId}?qty=${qty}`);\r\n  };\r\n  \r\n  return (\r\n\r\n    <div>\r\n\r\n      {Object.keys(productDetails).length !== null ? (\r\n      \r\n         <div>\r\n            <Link to=\"/products\">Back to result</Link>\r\n            <div className=\"row top\">\r\n              <div className=\"col-1\">\r\n\r\n                <img className=\"large\" src={productDetails.image} alt={productDetails.name}></img>\r\n              </div>\r\n              <div className=\"col-1\">\r\n                <ul>\r\n                  <li>\r\n                    <h1>Product Name: {productDetails.name}</h1>\r\n                  </li>\r\n                  <li><b>Price :</b> ${productDetails.priceValue}</li>\r\n                  <li>\r\n                    <b>Description:</b>\r\n                    <p>{productDetails.description}</p>\r\n                  </li>\r\n                  <li>\r\n                    <b>1st Year payment:</b>\r\n                    <p>${productDetails.fPrice} (Downpayment, Loan, Insurance and Maintenance)</p>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <div className=\"col-1\">\r\n                <div className=\"card card-body\">\r\n                  <ul>\r\n                    <li>\r\n                      <div className=\"row\">\r\n                        <div>Price</div>\r\n                        <div className=\"price\">${productDetails.fPrice}</div>\r\n                      </div>\r\n                    </li>\r\n                    <li>\r\n                      <div className=\"row\">\r\n                        <div>Status</div>\r\n                        <div>\r\n                          {productDetails.countInStock > 0 ? (\r\n                            <span className=\"success\">In Stock</span>\r\n                          ) : (\r\n                              <span className=\"danger\">Unavailable</span>\r\n                            )}\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                    <li>\r\n                      <div className=\"row\">\r\n                        <div>Stock left</div>\r\n                        <div className=\"stockcount\">{productDetails.countInStock}</div>\r\n                      </div>\r\n                    </li>\r\n                    {productDetails.countInStock > 0 && (\r\n                    <>\r\n                      <li>\r\n                        <div className=\"row\">\r\n                          <div>Qty</div>\r\n                          <div>\r\n                            <select\r\n                              value={qty}\r\n                              onChange={(e) => setQty(e.target.value)}\r\n                            >\r\n                              {[...Array(productDetails.countInStock).keys()].map(\r\n                                (x) => (\r\n                                  <option key={x + 1} value={x + 1}> \r\n                                    {x + 1}\r\n                                  </option>\r\n                                )\r\n                              )}\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                      </li>\r\n                      <li>\r\n                        <button\r\n                          onClick={addToCartHandler}\r\n                          className=\"primary block\"\r\n                        >\r\n                          Add to Cart\r\n                        </button>\r\n                      </li>\r\n                    </>\r\n                  )}\r\n\r\n                    \r\n                  </ul>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n            </div>\r\n        \r\n      ) : (\r\n        <LoadingBox></LoadingBox>\r\n      ) }\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// export default function ProductScreen(props) {\r\n//   const dispatch = useDispatch();\r\n//   const productId = props.match.params.id;\r\n//   const [qty, setQty] = useState(1); //default value is 1.\r\n//   const productDetails = useSelector((state) => state.productDetails);\r\n//   const { loading, error, product } = productDetails;\r\n\r\n  \r\n\r\n\r\n//   //\r\n//   useEffect(() => {\r\n//     dispatch(detailsProduct(productId));\r\n//   }, [dispatch, productId]);\r\n\r\n\r\n\r\n//   // set path once add to cart\r\n//   const addToCartHandler = () => {\r\n//     props.history.push(`/cart/${productId}?qty=${qty}`);\r\n//   };\r\n  \r\n//   return (\r\n//     <div>\r\n//       {loading ? (\r\n//         <LoadingBox></LoadingBox>\r\n//       ) : error ? (\r\n//         <MessageBox variant=\"danger\">{error}</MessageBox>\r\n//       ) : (\r\n//         <div>\r\n//             <Link to=\"/products\">Back to result</Link>\r\n//             <div className=\"row top\">\r\n//               <div className=\"col-1\">\r\n\r\n//                 <img className=\"large\" src={product.image} alt={product.name}></img>\r\n//               </div>\r\n//               <div className=\"col-1\">\r\n//                 <ul>\r\n//                   <li>\r\n//                     <h1>Product Name: {product.name}</h1>\r\n//                   </li>\r\n//                   <li><b>Price :</b> ${product.priceValue}</li>\r\n//                   <li>\r\n//                     <b>Description:</b>\r\n//                     <p>{product.description}</p>\r\n//                   </li>\r\n//                   <li>\r\n//                     <b>1st Year payment:</b>\r\n//                     <p>${product.fPrice} (Downpayment, Loan, Insurance and Maintenance)</p>\r\n//                   </li>\r\n//                 </ul>\r\n//               </div>\r\n//               <div className=\"col-1\">\r\n//                 <div className=\"card card-body\">\r\n//                   <ul>\r\n//                     <li>\r\n//                       <div className=\"row\">\r\n//                         <div>Price</div>\r\n//                         <div className=\"price\">${product.fPrice}</div>\r\n//                       </div>\r\n//                     </li>\r\n//                     <li>\r\n//                       <div className=\"row\">\r\n//                         <div>Status</div>\r\n//                         <div>\r\n//                           {product.countInStock > 0 ? (\r\n//                             <span className=\"success\">In Stock</span>\r\n//                           ) : (\r\n//                               <span className=\"danger\">Unavailable</span>\r\n//                             )}\r\n//                         </div>\r\n//                       </div>\r\n//                     </li>\r\n//                     <li>\r\n//                       <div className=\"row\">\r\n//                         <div>Stock left</div>\r\n//                         <div className=\"stockcount\">{product.countInStock}</div>\r\n//                       </div>\r\n//                     </li>\r\n//                     {product.countInStock > 0 && (\r\n//                     <>\r\n//                       <li>\r\n//                         <div className=\"row\">\r\n//                           <div>Qty</div>\r\n//                           <div>\r\n//                             <select\r\n//                               value={qty}\r\n//                               onChange={(e) => setQty(e.target.value)}\r\n//                             >\r\n//                               {[...Array(product.countInStock).keys()].map(\r\n//                                 (x) => (\r\n//                                   <option key={x + 1} value={x + 1}> \r\n//                                     {x + 1}\r\n//                                   </option>\r\n//                                 )\r\n//                               )}\r\n//                             </select>\r\n//                           </div>\r\n//                         </div>\r\n//                       </li>\r\n//                       <li>\r\n//                         <button\r\n//                           onClick={addToCartHandler}\r\n//                           className=\"primary block\"\r\n//                         >\r\n//                           Add to Cart\r\n//                         </button>\r\n//                       </li>\r\n//                     </>\r\n//                   )}\r\n\r\n                    \r\n//                   </ul>\r\n\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//             </div>\r\n            \r\n//       )}\r\n//     </div>\r\n//   );\r\n// }","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\SigninScreen.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\ScanScreen.js",["147"],"import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Scanner from '../components/Scanner'\r\nimport Result from './Result1'\r\nimport Axios from 'axios'\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    scanning: false,\r\n    results: [],\r\n  }\r\n\r\n  _scan = () => {\r\n    this.setState({ scanning: !this.state.scanning })\r\n  }\r\n\r\n  _onDetected = async(result) => {\r\n    \r\n    console.log(result.codeResult)\r\n      const scanCode = result.codeResult.code;\r\n      console.log(\"scancode:\" + scanCode)\r\n      let companyCode = scanCode.substr(0, 3);\r\n      //this.state.companyCode\r\n      console.log(companyCode)\r\n\r\n      const yearRes= await Axios.get('/year.json')\r\n      const year = yearRes.data.session\r\n      this.props.history.push(`/product/${scanCode}`)\r\n  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this._scan}>\r\n          {this.state.scanning ? 'Stop Scanning' : 'Start Scanning'}\r\n        </button>\r\n        <ul className=\"results\">\r\n          {this.state.results.map((result, i) => (\r\n            <Result key={result.codeResult.code + i} result={result} />\r\n          ))}\r\n        </ul>\r\n        {this.state.scanning ? <Scanner onDetected={this._onDetected} /> : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(<App />, rootElement)","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\DashboardScreen.js",["148","149","150"],"import React, { useEffect, useState } from 'react';\r\nimport {setNextYearAction} from '../actions/AdminActions'\r\nimport Axios from 'axios';\r\nimport { useDispatch } from 'react-redux';\r\nimport AdminBudgetSheet from '../components/AdminBudgetSheet'\r\n\r\nconst prevYears = (currentYear) => {\r\n\tlet prevYearsArr = []\r\n  let currentYearDigit = Number(currentYear.substr(-1))\r\n  console.log(\"prevYears\")\r\n  if (currentYearDigit===1){\r\n\r\n  return prevYearsArr\r\n  }\r\n  for (let i=1; i<currentYearDigit; i++){\r\n  \r\n  prevYearsArr.push(`Y0${i}`)\r\n\r\n  \r\n  }\r\n\treturn prevYearsArr\r\n}\r\n\r\n\r\n\r\nexport default function YearScreen() {\r\n  \r\n  \r\nconst [allUsersBudgetDetails, setAllUsersBudgetDetails] = useState({}) // default as empty object\r\n\r\n\r\n// To get a list of all available users (with records)\r\nconst getUsers = async () => {\r\n\tconst usersRes = await Axios.get(`users.json`) // double check if correct\r\n  const usersObj = usersRes.data\r\n  const usersArray = Object.keys(usersObj) // returns the keys of this usersObj, which is essentially an array of the users\r\n  return usersArray // this returns something like [\"BHA001\", \"GEC001\"]\r\n}\r\n\r\n// Previously you had this function. You can either import it or just copy paste the same function here...\r\nconst getBudgetDetails = async (userId) => {\r\n  const yearRes = await Axios.get(\"/year.json\");\r\n  const year = yearRes.data.session;\r\n\r\n  const userCompany = userId.substr(0, 3);\r\n  console.log(userCompany)\r\n  //console.log(year)\r\n\r\n  \r\n  console.log(userId);\r\n  const userRes = await Axios.get(`/users/${userId}.json`)\r\n  const userRecords = userRes.data\r\n  console.log(userRecords)\r\n\r\n  \r\n\r\n  // To store the budget details for the respective years\r\nlet budgetDetails = {}\r\n\r\n// 1. Get the current year (Line 26)\r\n\r\n// Loop through each of the available years\r\nconst prevYearsArr = prevYears(year)\r\nfor (let prevYear of prevYearsArr){\r\nconsole.log(prevYear)\r\n// 2. For every previous year\r\n\r\n// Template for each year\r\nbudgetDetails[prevYear] = {\r\n  \"year\": prevYear,\r\n  \"userId\": userId,\r\n  \"salary\": 0,\r\n  \"total_commission\":0,\r\n  \"total_income\": 0,\r\n  \"total_expense\": 0,\r\n  \"nett_worth\": 0,\r\n  // Extra identification for expenses\r\n  \"education_expenses\": 0,\r\n  \"property_expenses\": 0\r\n  }\r\n\r\n\r\n// ================================TO GET TOTAL INCOME VALUES===============================\r\n// a. Get current year Salary\r\nconst currYearSalaryRes = await Axios.get(`/companies/${userCompany}/salary/${prevYear}.json`) \r\nconst currYearSalary = currYearSalaryRes.data\r\n\r\nbudgetDetails[prevYear].salary = currYearSalary\r\n\r\n\r\n // b. Get Total Commission from items sold for this year\r\n let totalCommission = 0\r\n  console.log(userRecords.sell_trans[prevYear])\r\n  console.log(userRecords)\r\n\r\n if(userRecords.sell_trans[prevYear]){\r\n   for(let [productId, productRecord] of Object.entries(userRecords.sell_trans[prevYear])){\r\n    console.log(productId)\r\n   // For every items sold\r\n   // i. Get the commision amt for this item\r\n   \r\n   const productCommissionRes = await Axios.get(`companies/${userCompany}/commission/${prevYear}/${productId}.json`)\r\n   const productCommission = productCommissionRes.data;\r\n   console.log(\"product commission\" + productCommission)\r\n   \r\n  \r\n  // ii. Multiply by the quantity of item to get the total commision of this item\r\n   // to sum up the total quantity of product\r\n   let totalProductQty = 0\r\n   for(let [userId,qty] of Object.entries(productRecord)){ // To get the total quantity sold for this product\r\n     totalProductQty += qty\r\n     \r\n   }\r\n  console.log(`Income: The total quantity of product(${productId}) sold is ${totalProductQty}`)\r\n   // To get the total commision of this item\r\n let totalProductCommission = productCommission * totalProductQty\r\n   console.log(`Total Commision of ${productId} is ${totalProductCommission}`)\r\n  totalCommission += totalProductCommission\r\n  \r\n   }\r\n   // Save Total Commisions to budgetDetails\r\n   budgetDetails[prevYear].total_commission = totalCommission\r\n  \r\n }\r\n\r\n // c. Sum up Total Income = Salary + Total Commission\r\n let totalIncome = 0\r\n totalIncome = currYearSalary + totalCommission\r\n// Save to budgetDetails\r\n budgetDetails[prevYear].total_income = totalIncome\r\n\r\n\r\n\r\n // ================================TO GET TOTAL EXPENSES VALUES===============================\r\n // d. Get Total Expense from items bought for this year\r\n let totalExpense = 0 \r\n\r\n if(userRecords.buy_trans[prevYear]){\r\n   for(let [productId,productRecord] of Object.entries(userRecords.buy_trans[prevYear])){\r\n   // For every item bought\r\n  // i. Get the cost amount for this particular item\r\n  console.log(productId)\r\n  const productCostRes =  await Axios.get(`product/${userCompany}/${prevYear}/${productId}/priceValue.json`)\r\n  const productCost = productCostRes.data\r\n  // ii. Multiply by the quantity of item to get the total expense of this item\r\n  // For me to sum up the total quantity of product\r\n  let totalProductQty = 0\r\n  for(let [userId,qty] of Object.entries(productRecord)){ // To get the total quantity bought for this product\r\n    totalProductQty += qty\r\n  }\r\n  console.log(`Expense: The total quantity of product(${productId}) bought is ${totalProductQty}`)\r\n  // To get the Total Expense of this item\r\n  let totalProductExpense = productCost * totalProductQty\r\n  console.log(`Total Expense of ${productId} is ${totalProductExpense}`)\r\n  totalExpense += totalProductExpense\r\n  \r\n  }\r\n  // Save Total Expense to budgetDetails\r\n  budgetDetails[prevYear].total_expense = totalExpense\r\n  \r\n}\r\n\r\n\r\n\r\n// ====================================TO CALCULATE NETT WORTH===================================\r\n// Net Worth = Total Income - Total Expense\r\nlet nettWorth = 0\r\nnettWorth = totalIncome - totalExpense\r\nbudgetDetails[prevYear].nett_worth = nettWorth\r\n\r\n\r\n\r\n\r\n// End of code for prevYear\r\n//  ===============================================================================================\r\n}\r\nconsole.log(budgetDetails)\r\nreturn budgetDetails\r\n \r\n}\r\n\r\nconst getAllUsersBudgetDetails = async (listOfUsers)=> {\r\n\tlet usersBudgetDetails = {}\r\n\tfor (let userId of listOfUsers){\r\n        let userBudgetDetail = await getBudgetDetails(userId)\r\n        console.log(userBudgetDetail)\r\n        usersBudgetDetails[userId] = userBudgetDetail // Store this user's budget details\r\n      console.log(usersBudgetDetails)\r\n\r\n      }\r\n      \r\n  return usersBudgetDetails // return\r\n}\r\n\r\nuseEffect(() => {\r\n    console.log(\"use Effect\")\r\n    \r\n\r\n    getUsers().then((listOfUsers) => getAllUsersBudgetDetails(listOfUsers)).then((allUsersBudgetDetails)=>{\r\n    setAllUsersBudgetDetails(allUsersBudgetDetails)\r\n    console.log(allUsersBudgetDetails)\r\n    });\r\n  }, []);\r\n  \r\n  \r\n  \r\n  const [yearDetails, setYearDetails] = useState('');\r\n \r\n  const getYearDetails = async () => {\r\n    const yearRes = await Axios.get('/year.json')\r\n   const year = yearRes.data.session;\r\n    console.log(year)\r\n    return year;\r\n  };\r\n  const dispatch = useDispatch();\r\n  const increaseYearHandler = () => {\r\n    //e.preventDefault();\r\n    let newYear = increasedYear(yearDetails)\r\n    console.log(\"Hello new year\" + newYear)\r\n    dispatch(setNextYearAction(newYear));\r\n  };\r\n\r\n  const increasedYear = (year) => {\r\n    let currentYearDigit = Number(year.substr(-1))\r\n    let newYear = String(currentYearDigit + 1)\r\n    let newYearFormattedString = year.replace(currentYearDigit, newYear)\r\n    return newYearFormattedString\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"hi\");\r\n    getYearDetails().then((yearDetails) => {\r\n      console.log(\r\n        \"Here's the productDetails that will be saved into productDetails state:\"\r\n      );\r\n      console.log(yearDetails);\r\n      setYearDetails(yearDetails);\r\n      \r\n    });\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"form\">\r\n        <div>\r\n          <h1>Admin Dashboard</h1>\r\n        </div>\r\n        <div>\r\n        <h3 onChange>Current Year: {yearDetails}</h3>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"yearText\">Set Year</label>\r\n          {/* <input\r\n            type=\"text\"\r\n            id=\"yearText\"\r\n            placeholder=\"Enter Year (E.g. Y01, Y02, Y03)\"\r\n          ></input> */}\r\n        </div>\r\n        <div>\r\n          <label />\r\n          <button className=\"primary\" onClick={() =>increaseYearHandler()}>\r\n            Next Year\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <label />\r\n        </div>\r\n        <>\r\n    <div className=\"row center\">\r\n     \r\n    {Object.entries(allUsersBudgetDetails).map(([userId, userBudgetDetails]) => (\r\n\t    Object.entries(userBudgetDetails).map(([year, yearBudgetDetails])=>(\r\n        <AdminBudgetSheet key={Math.random()}yearBudgetDetails={yearBudgetDetails}></AdminBudgetSheet>\r\n      ))))}\r\n\r\n          \r\n        </div>\r\n          </>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\ObjectiveScreen.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\userActions.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\BudgetSheetScreen.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\CartReducers.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\ScannedItems.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\reducers\\BudgetSheetReducers.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\productActions.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\CartActions.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\AdminActions.js",["151","152","153"],"import Axios from 'axios';\r\n\r\n\r\nexport const setNextYearAction = (yearDetails) => async (dispatch) => {\r\n    console.log(\"Here are the year details setNextYearAction : \"+ yearDetails)\r\n    //update the year \r\n    const yearRes = await Axios.patch('/year.json', {session : yearDetails })\r\n    const year = yearRes.data.session\r\n    let currentYearDigit = Number(year.substr(-1))\r\n    let oldYear = String(currentYearDigit - 1)\r\n    let oldYearFormattedString = year.replace(currentYearDigit, oldYear)\r\n\r\n\r\n    const usersRes = await Axios.get('/users.json')\r\n    const usersRecords = usersRes.data\r\n    console.log(usersRecords)\r\n\r\n\r\n    // For each user(student) that has records under 'users'\r\n    for ( let [userId, userRecord] of Object.entries(usersRecords)) {\r\n\r\n    if (userRecord.cart)\r\n    {\r\n      \t// For each item that is under this user's cart\r\n  for(let [cartProductId,cartProductSellersRecord] of Object.entries(userRecord.cart)){\r\n  \r\n    // For each seller of this item in the cart\r\n    for(let [cartProductSeller, qty] of Object.entries(cartProductSellersRecord)){\r\n    \t\r\n    \tconsole.log(userId + \" bought from \" + cartProductSeller + \" product(\" + cartProductId + \") of qty:\" + qty) // this should contain all the info you need to do the below steps\r\n\r\n      console.log(userId)\r\n      console.log(year)\r\n      console.log(cartProductId)\r\n      console.log(cartProductSeller)\r\n      const addBuyTrans = await Axios.patch(`users/${userId}/buy_trans/${oldYearFormattedString}/${cartProductId}.json`, {[cartProductSeller]: qty})\r\n      const addSellTrans = await Axios.patch(`users/${cartProductSeller}/sell_trans/${oldYearFormattedString}/${cartProductId}.json`, {[userId]: qty})\r\n      const deleteCart = await Axios.delete(`users/${userId}/cart.json`)\r\n\r\n    \r\n    }\r\n\r\n    \r\n  }\r\n      \r\n    }// end if \r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// When we change to new year, we want to\r\n\r\n// Loop through all available users(students), and for each user, we want to:\r\n\r\n// See if there are items inside the cart records, if there is,\r\n\r\n// For each item,\r\n// 1. Change the record from cart to buy_trans of this user\r\n// 2. Add the this record to sell_trans of the seller (user whom this user bought from)","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\Result1.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\actions\\BudgetSheetActions.js",["154","155"],"import Axios from \"axios\";\r\nimport {\r\n  BUDGETSHEET_FAIL,\r\n  BUDGETSHEET_REQUEST,\r\n  BUDGETSHEET_SUCCESS,\r\n\r\n} from \"../constants/BudgetSheetConstants\";\r\n\r\nconst prevYears = (currentYear) => {\r\n\tlet prevYearsArr = []\r\n  let currentYearDigit = Number(currentYear.substr(-1))\r\n  console.log(\"prevYears\")\r\n  if (currentYearDigit===1){\r\n\r\n  return prevYearsArr\r\n  }\r\n  for (let i=1; i<currentYearDigit; i++){\r\n  \r\n  prevYearsArr.push(`Y0${i}`)\r\n\r\n  \r\n  }\r\n\treturn prevYearsArr\r\n}\r\n\r\nexport const budgetSheetlist = (userId) => async (dispatch) => {\r\n  dispatch({ type: BUDGETSHEET_REQUEST});\r\n\r\n  try {\r\n\r\n    const yearRes = await Axios.get(\"/year.json\");\r\n    const year = yearRes.data.session;\r\n\r\n    const userCompany = userId.substr(0, 3);\r\n    console.log(userCompany)\r\n    //console.log(year)\r\n\r\n    \r\n    console.log(userId);\r\n    const userRes = await Axios.get(`/users/${userId}.json`)\r\n    const userRecords = userRes.data\r\n    console.log(userRecords)\r\n\r\n    \r\n\r\n    // To store the budget details for the respective years\r\nlet budgetDetails = {}\r\n\r\n// 1. Get the current year (Line 26)\r\n\r\n// Loop through each of the available years\r\nconst prevYearsArr = prevYears(year)\r\nfor (let prevYear of prevYearsArr){\r\n  console.log(prevYear)\r\n\t// 2. For every previous year\r\n  \r\n  // Template for each year\r\n  budgetDetails[prevYear] = {\r\n    \"year\": prevYear,\r\n    \"userId\": userId,\r\n  \t\"salary\": 0,\r\n    \"total_commission\":0,\r\n  \t\"total_income\": 0,\r\n    \"total_expense\": 0,\r\n    \"nett_worth\": 0,\r\n    // Extra identification for expenses\r\n    \"education_expenses\": 0,\r\n    \"property_expenses\": 0\r\n    }\r\n  \r\n\r\n  // ================================TO GET TOTAL INCOME VALUES===============================\r\n  // a. Get current year Salary\r\n  const currYearSalaryRes = await Axios.get(`/companies/${userCompany}/salary/${prevYear}.json`) \r\n  const currYearSalary = currYearSalaryRes.data\r\n  console.log(currYearSalary)\r\n\r\n  budgetDetails[prevYear].salary = currYearSalary\r\n\r\n  console.log(budgetDetails)\r\n  \r\n  \r\n   // b. Get Total Commission from items sold for this year\r\n   let totalCommission = 0\r\n    console.log(userRecords.sell_trans[prevYear])\r\n    console.log(userRecords)\r\n\r\n   if(userRecords.sell_trans[prevYear]){\r\n     for(let [productId, productRecord] of Object.entries(userRecords.sell_trans[prevYear])){\r\n      console.log(productId)\r\n     // For every items sold\r\n     // i. Get the commision amt for this item\r\n     \r\n     const productCommissionRes = await Axios.get(`companies/${userCompany}/commission/${prevYear}/${productId}.json`)\r\n     const productCommission = productCommissionRes.data;\r\n     console.log(\"product commission\" + productCommission)\r\n     \r\n    \r\n    // ii. Multiply by the quantity of item to get the total commision of this item\r\n\t \t// to sum up the total quantity of product\r\n     let totalProductQty = 0\r\n     for(let [userId,qty] of Object.entries(productRecord)){ // To get the total quantity sold for this product\r\n       totalProductQty += qty\r\n       \r\n     }\r\n    console.log(`Income: The total quantity of product(${productId}) sold is ${totalProductQty}`)\r\n     // To get the total commision of this item\r\n   let totalProductCommission = productCommission * totalProductQty\r\n     console.log(`Total Commision of ${productId} is ${totalProductCommission}`)\r\n    totalCommission += totalProductCommission\r\n    \r\n   \t}\r\n\t \t// Save Total Commisions to budgetDetails\r\n     budgetDetails[prevYear].total_commission = totalCommission\r\n    \r\n   }\r\n\r\n   // c. Sum up Total Income = Salary + Total Commission\r\n   let totalIncome = 0\r\n   totalIncome = currYearSalary + totalCommission\r\n  // Save to budgetDetails\r\n   budgetDetails[prevYear].total_income = totalIncome\r\n  \r\n  \r\n  \r\n   // ================================TO GET TOTAL EXPENSES VALUES===============================\r\n   // d. Get Total Expense from items bought for this year\r\n   let totalExpense = 0 \r\n  \r\n   if(userRecords.buy_trans[prevYear]){\r\n     for(let [productId,productRecord] of Object.entries(userRecords.buy_trans[prevYear])){\r\n     // For every item bought\r\n    // i. Get the cost amount for this particular item\r\n    console.log(productId)\r\n    const productCostRes =  await Axios.get(`product/${userCompany}/${prevYear}/${productId}/priceValue.json`)\r\n    const productCost = productCostRes.data\r\n    // ii. Multiply by the quantity of item to get the total expense of this item\r\n\t\t// For me to sum up the total quantity of product\r\n    let totalProductQty = 0\r\n    for(let [userId,qty] of Object.entries(productRecord)){ // To get the total quantity bought for this product\r\n    \ttotalProductQty += qty\r\n    }\r\n    console.log(`Expense: The total quantity of product(${productId}) bought is ${totalProductQty}`)\r\n    // To get the Total Expense of this item\r\n    let totalProductExpense = productCost * totalProductQty\r\n    console.log(`Total Expense of ${productId} is ${totalProductExpense}`)\r\n    totalExpense += totalProductExpense\r\n    \r\n  \t}\r\n\t\t// Save Total Expense to budgetDetails\r\n    budgetDetails[prevYear].total_expense = totalExpense\r\n    \r\n  }\r\n  \r\n  \r\n\r\n  // ====================================TO CALCULATE NETT WORTH===================================\r\n  // Net Worth = Total Income - Total Expense\r\n  let nettWorth = 0\r\n  nettWorth = totalIncome - totalExpense\r\n  budgetDetails[prevYear].nett_worth = nettWorth\r\n\r\n  \r\n \r\n  \r\n  // End of code for prevYear\r\n  //  ===============================================================================================\r\n}\r\nconsole.log(budgetDetails)\r\n\r\n     dispatch({ type: BUDGETSHEET_SUCCESS, payload: budgetDetails});\r\n     \r\n  } catch (error) {\r\n    dispatch({ type: BUDGETSHEET_FAIL, payload: error.message });\r\n  }\r\n};","C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\LoadingBox.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\Product.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\MessageBox.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\Scanner.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\AdminBudgetSheet.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\components\\BudgetSheet.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\constants\\CartConstants.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\constants\\BudgetSheetConstants.js",[],"C:\\Users\\VCP001\\Desktop\\PinnacleLifeChallenge\\PinnacleLifeChallenge-1\\PinnacleLifeChallenge-1\\frontend\\src\\screens\\Footer.js",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":41,"column":6,"nodeType":"162","endLine":41,"endColumn":8,"suggestions":"163"},{"ruleId":"164","severity":1,"message":"165","line":28,"column":13,"nodeType":"166","messageId":"167","endLine":28,"endColumn":17},{"ruleId":"164","severity":1,"message":"168","line":110,"column":13,"nodeType":"166","messageId":"167","endLine":110,"endColumn":19},{"ruleId":"164","severity":1,"message":"168","line":148,"column":12,"nodeType":"166","messageId":"167","endLine":148,"endColumn":18},{"ruleId":"160","severity":1,"message":"169","line":203,"column":6,"nodeType":"162","endLine":203,"endColumn":8,"suggestions":"170"},{"ruleId":"164","severity":1,"message":"171","line":36,"column":13,"nodeType":"166","messageId":"167","endLine":36,"endColumn":24},{"ruleId":"164","severity":1,"message":"172","line":37,"column":13,"nodeType":"166","messageId":"167","endLine":37,"endColumn":25},{"ruleId":"164","severity":1,"message":"173","line":38,"column":13,"nodeType":"166","messageId":"167","endLine":38,"endColumn":23},{"ruleId":"164","severity":1,"message":"168","line":102,"column":15,"nodeType":"166","messageId":"167","endLine":102,"endColumn":21},{"ruleId":"164","severity":1,"message":"168","line":140,"column":14,"nodeType":"166","messageId":"167","endLine":140,"endColumn":20},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getProductDetails' and 'productId'. Either include them or remove the dependency array.","ArrayExpression",["176"],"no-unused-vars","'year' is assigned a value but never used.","Identifier","unusedVar","'userId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllUsersBudgetDetails'. Either include it or remove the dependency array.",["177"],"'addBuyTrans' is assigned a value but never used.","'addSellTrans' is assigned a value but never used.","'deleteCart' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},"Update the dependencies array to be: [getProductDetails, productId]",{"range":"182","text":"183"},"Update the dependencies array to be: [getAllUsersBudgetDetails]",{"range":"184","text":"185"},[1259,1261],"[getProductDetails, productId]",[6652,6654],"[getAllUsersBudgetDetails]"]